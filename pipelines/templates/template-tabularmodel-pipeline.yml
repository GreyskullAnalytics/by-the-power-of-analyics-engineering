parameters:
  PBIDataset: '$(PBIDataset)'
  PBIWorkspace: '$(PBIWorkspace)'
  ServiceConnection: '$(ServiceConnection)'
  
steps:
- checkout: self
- task: AzureKeyVault@2
  inputs:
    azureSubscription: $(ServiceConnection)
    KeyVaultName: 'kv-greyskull-uks-001'
    SecretsFilter: 'sp-greyskull-uks-001-tenant-id, sp-greyskull-uks-001-client-id, sp-greyskull-uks-001-secret'
    RunAsPreJob: false

- script: |
   $(Build.SourcesDirectory)\powerbi\tabulareditor\TabularEditor.exe "$(Build.SourcesDirectory)\powerbi\models\$(PBIDataset)\Database.json" -A "$(Build.SourcesDirectory)\powerbi\bestpracticeanalyser\BPARules.json" -V
   
  displayName: 'Run Best Practice Analyser'

- task: AzureCLI@2
  displayName: 'Deploy Dataset'
  inputs:
    azureSubscription: '$(ServiceConnection)'
    scriptType: batch
    scriptLocation: inlineScript
    inlineScript: |
     $(Build.SourcesDirectory)\powerbi\tabulareditor\TabularEditor.exe "$(Build.SourcesDirectory)\powerbi\models\$(PBIDataset)\Database.json" -D "Data Source=$(PBIWorkspace);User ID=app:$(sp-greyskull-uks-001-client-id)@$(sp-greyskull-uks-001-tenant-id);Password=$(sp-greyskull-uks-001-secret);" "$(PBIDataset)" -O -C -P -R -E -V'
    addSpnToEnvironment: true

- task: AzureCLI@2
  displayName: 'Deploy Data Dictionary'
  inputs:
    azureSubscription: '$(ServiceConnection)'
    scriptType: batch
    scriptLocation: inlineScript
    inlineScript: |
     echo Model.Expressions["_DataSet"].Expression = "\"$(PBIDataset)\" meta [IsParameterQuery=true, Type=\"Any\", IsParameterQueryRequired=true]"; Model.Expressions["_XMLAEndpoint"].Expression = "\"$(PBIWorkspace)\" meta [IsParameterQuery=true, Type=\"Any\", IsParameterQueryRequired=true]";> SetDeploymentParameters.cs
     $(Build.SourcesDirectory)\powerbi\tabulareditor\TabularEditor.exe "$(Build.SourcesDirectory)\powerbi\models\datadictionary\Database.json" -S SetDeploymentParameters.cs -D "Data Source=$(PBIWorkspace);User ID=app:$(sp-greyskull-uks-001-client-id)@$(sp-greyskull-uks-001-tenant-id);Password=$(sp-greyskull-uks-001-secret);" "$(PBIDataset) Data Dictionary" -O -C -P -R -E -V'

    addSpnToEnvironment: true

- task: AzureCLI@2
  displayName: 'Refresh Data Dictionary'
  inputs:
    azureSubscription: $(ServiceConnection)
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
     $XMLAEndpoint = "$(PBIWorkspace)"
     $DatasetName = "$(PBIDataset) Data Dictionary"
     
     Write-Output "Install MicrosoftPowerBIMgmt Module"
     #Install Powershell Module if Needed
         if (Get-Module -ListAvailable -Name "MicrosoftPowerBIMgmt") {
             Write-Host "MicrosoftPowerBIMgmt already installed"
         } else {
             Install-Module -Name MicrosoftPowerBIMgmt -Scope CurrentUser -AllowClobber -Force
         }
     
     Write-Output "Log In to Power BI Service"
     $applicationId = "$(sp-greyskull-uks-001-client-id)";
     $securePassword = "$(sp-greyskull-uks-001-secret)" | ConvertTo-SecureString -AsPlainText -Force
     $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $applicationId, $securePassword
     Connect-PowerBIServiceAccount -ServicePrincipal -Credential $credential -TenantId "$(sp-greyskull-uks-001-tenant-id)"
     
     Write-Output "Get Workspace Name from the XMLA Endpoint"
     #Get Workspace Name from the XMLA Endpoint
     $WorkspaceName = ($XMLAEndpoint).Substring($XMLAEndpoint.Length - ($XMLAEndpoint[-1..-$XMLAEndpoint.Length] -join '').IndexOf("/"), ($XMLAEndpoint[-1..-$XMLAEndpoint.Length] -join '').IndexOf("/"))
     Write-Output "$WorkspaceName"

     Write-Output "Get Workspace ID from Workspace Name"
     #Get Workspace ID from Workspace Name
     $WorkspaceID = Get-PowerBIWorkspace -Name $WorkspaceName | `
         Where {$_.Type -eq "Workspace"} | ForEach {$_.Id}
     
     Write-Output "Get Dataset ID based on Workspace ID and Dataset Name"
     #Get Dataset ID based on Workspace ID and Dataset Name
     $DatasetID = Get-PowerBIDataset -WorkspaceId $WorkspaceID | ` 
         Where {$_.Name -eq $DatasetName} | ForEach {$_.Id}
     
     #Build refresh URL
     
     $RefreshDSURL = 'groups/' + $WorkspaceID + '/datasets/' + $DatasetID + '/refreshes'
     
     #Execute refresh with mail on failure
     
     $MailFailureNotify = @{"notifyOption"="MailOnFailure"}
     
     Write-Output "Submit Refresh"
     Invoke-PowerBIRestMethod -Url $RefreshDSURL -Method Post -Body $MailFailureNotify
    addSpnToEnvironment: true